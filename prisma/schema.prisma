datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String       @id @default(uuid())
  username  String       @unique
  email     String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  games     GamePlayer[]
  scores    GameScore[]
  answers   RoundAnswer[]
  
  @@map("users")
}

model Game {
  id        String       @id @default(uuid())
  code      String       @unique
  status    GameStatus   @default(WAITING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  startedAt DateTime?
  finishedAt DateTime?
  
  // Relaciones
  players   GamePlayer[]
  rounds    Round[]
  scores    GameScore[]
  snapshots GameSnapshot[]
  events    GameEvent[]
  
  @@map("games")
}

model GamePlayer {
  id        String   @id @default(uuid())
  gameId    String
  userId    String
  score     Int      @default(0)
  joinedAt  DateTime @default(now())
  
  // Relaciones
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([gameId, userId])
  @@map("game_players")
}

model Round {
  id        String   @id @default(uuid())
  gameId    String
  roundNumber Int
  letter    String
  startTime DateTime @default(now())
  endTime   DateTime?
  
  // Relaciones
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  answers   RoundAnswer[]
  
  @@unique([gameId, roundNumber])
  @@map("rounds")
}

model RoundAnswer {
  id       String @id @default(uuid())
  roundId  String
  userId   String
  answers  Json   // Almacena las respuestas como JSON
  score    Int    @default(0)
  finishedAt DateTime @default(now())
  
  // Relaciones
  round    Round  @relation(fields: [roundId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([roundId, userId])
  @@map("round_answers")
}

model GameScore {
  id        String   @id @default(uuid())
  gameId    String
  userId    String
  score     Int
  createdAt DateTime @default(now())
  
  // Relaciones
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([gameId, userId])
  @@map("game_scores")
}

// Nuevas tablas para persistencia del estado
model GameSnapshot {
  id        String   @id @default(uuid())
  gameId    String
  snapshot  Json     // Estado completo del juego en JSON
  roundNumber Int?
  createdAt DateTime @default(now())
  
  // Relaciones
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  @@map("game_snapshots")
}

model GameEvent {
  id        String   @id @default(uuid())
  gameId    String
  eventType String   // PLAYER_JOINED, ROUND_STARTED, ANSWER_SUBMITTED, etc.
  eventData Json     // Datos espec√≠ficos del evento
  timestamp DateTime @default(now())
  
  // Relaciones
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  @@map("game_events")
}

enum GameStatus {
  WAITING
  PLAYING
  FINISHED
  CANCELLED
}
